---
AWSTemplateFormatVersion: 2010-09-09

Resources:
#----------------------------------------------------------------------------
# VPC
#----------------------------------------------------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:          172.20.0.0/16      
      EnableDnsHostnames: True
      EnableDnsSupport:   True
      InstanceTenancy:    default
      Tags:
        - Key:   Name
          Value: !Join [ -, [!Ref 'AWS::StackName', VPC]]

  PrivateCidr:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      CidrBlock: 172.30.0.0/16
      VpcId:     !Ref VPC           

  InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags: 
          - Key:   Name
            Value: !Join [ -, [!Ref 'AWS::StackName', IGW]]
  
  GatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId:             !Ref VPC

#----------------------------------------------------------------------------
# Subnets
#----------------------------------------------------------------------------
  PublicSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:               !Ref VPC
      MapPublicIpOnLaunch: True
      AvailabilityZone:    !Select [ 0, !GetAZs ]
      CidrBlock:           !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ]]
      Tags:
        - Key:   Name
          Value: !Join [ -, [ !Ref "AWS::StackName", public, !Select [0, !GetAZs ] ] ]
          
  PublicSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:               !Ref VPC
      MapPublicIpOnLaunch: True
      AvailabilityZone:    !Select [ 1, !GetAZs ]
      CidrBlock:           !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ]]
      Tags:
        - Key:   Name
          Value: !Join [ -, [ !Ref "AWS::StackName", public, !Select [1, !GetAZs ] ] ]

  PublicSubnetAZ3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:               !Ref VPC
      MapPublicIpOnLaunch: True
      AvailabilityZone:    !Select [ 2, !GetAZs ]
      CidrBlock:           !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 256, 8 ]]
      Tags:
        - Key:   Name
          Value: !Join [ -, [ !Ref "AWS::StackName", public, !Select [2, !GetAZs ] ] ]

  PrivateSubnetAZ1:
    DependsOn: PrivateCidr
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:               !Ref VPC
      AvailabilityZone:    !Select [ 0, !GetAZs ]
      CidrBlock:           !Select [ 0, !Cidr [ !Select [ 0, !GetAtt VPC.CidrBlockAssociations ], 256, 8 ]]
      Tags:
        - Key:   Name
          Value: !Join [ -, [ !Ref "AWS::StackName", private, !Select [0, !GetAZs ] ] ]

  PrivateSubnetAZ2:
    DependsOn: PrivateCidr
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:               !Ref VPC
      AvailabilityZone:    !Select [ 1, !GetAZs ]
      CidrBlock:           !Select [ 1, !Cidr [ !Select [ 0, !GetAtt VPC.CidrBlockAssociations ], 256, 8 ]]
      Tags:
        - Key:   Name
          Value: !Join [ -, [ !Ref "AWS::StackName", private, !Select [1, !GetAZs ] ] ]

  PrivateSubnetAZ3:
    DependsOn: PrivateCidr
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:               !Ref VPC
      AvailabilityZone:    !Select [ 2, !GetAZs ]
      CidrBlock:           !Select [ 2, !Cidr [ !Select [ 0, !GetAtt VPC.CidrBlockAssociations ], 256, 8 ]]
      Tags:
        - Key:   Name
          Value: !Join [ -, [ !Ref "AWS::StackName", private, !Select [2, !GetAZs ] ] ]

#----------------------------------------------------------------------------
# Route Tables
#----------------------------------------------------------------------------
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [-, [!Ref "AWS::StackName", "private-RT"]]
    
  PrivateRouteAssociationAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:     !Ref PrivateSubnetAZ1
      RouteTableId: !Ref PrivateRouteTable

  PrivateRouteAssociationAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:     !Ref PrivateSubnetAZ2
      RouteTableId: !Ref PrivateRouteTable

  PrivateRouteAssociationAZ3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:     !Ref PrivateSubnetAZ3
      RouteTableId: !Ref PrivateRouteTable
#----------------------------------------------------------------------------
# Security Group
#----------------------------------------------------------------------------
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allows HTTP/HTTPS to access the ALB"
      GroupName:        "HTTP/HTTPS"
      VpcId:            !Ref VPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort :  80
          ToPort   :  80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort :  443
          ToPort   :  443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - CidrIp:  127.0.0.1/32
          IpProtocol: -1
#----------------------------------------------------------------------------
# Application Load Balancer
#----------------------------------------------------------------------------
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: !Join [ -, [!Ref 'AWS::StackName', ALB]]
      Type: application
      IpAddressType: ipv4      
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref ALBSecurityGroup
      Subnets: 
        - !Ref PublicSubnetAZ1
        - !Ref PublicSubnetAZ2
        - !Ref PublicSubnetAZ3

  ALBlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTP"
            Port: "80"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_200"

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name:     !Join [ -, [ !Ref 'AWS::StackName', ALB-Target-Group]]
      Port:     80
      Protocol: HTTP
      VpcId:    !Ref VPC

      HealthCheckEnabled:         True
      HealthCheckIntervalSeconds: 60
      HealthCheckPath:            /healthy.html
      HealthCheckPort:            80
      HealthCheckProtocol:        HTTP
      HealthCheckTimeoutSeconds:  5
      HealthyThresholdCount:      2
      Matcher:
        HttpCode: 200